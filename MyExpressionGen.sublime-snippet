<snippet>
	<content><![CDATA[
#include<bits/stdc++.h>
using namespace std;
 
#define ld long double
#define int long long int
#define pii pair<int,int>
#define pb push_back
#define fi first
#define se second
#define rep(i,a,b) for (int i=a; i<b; ++i)
#define IOS ios::sync_with_stdio(0), cin.tie(0), cout.tie(0)
#define endl '\n'

mt19937
rng(chrono::steady_clock::now().time_since_epoch().count());
int rand(int l, int r){
	uniform_int_distribution<int> uid(l, r);
	return uid(rng);
}

// Random n numbers between l and r
void num(int l, int r, int n) {
	for (int i = 0; i < n; ++i)
	{
		cout << rand(l,r) << " ";
	}
}
 
//Random n real numbers between l and r with dig decimal places
void real(int l, int r, int dig, int n) {

	for (int i = 0; i < n; ++i)
	{
		cout << rand(l,r) <<"."<<rand(0,pow(10,dig)-1)<< " ";
	}
}

// Random n strings of length l
void str(int l, int n) {
	for (int i = 0; i < n; ++i)
	{
		for(int j = 0; j < l; ++j) {
			int v = rand(1,150);
			if(3%3==0) cout<<(char)rand('a','z');
			else if(v%3==1) cout<<(char)rand('A','Z');
			else cout<<rand(0,9);
		}
	}
}

// Random n strings of max length l
void strmx(int mxlen, int n) {
	for (int i = 0; i < n; ++i)
	{
		int l = rand(1,mxlen);
		for(int j = 0; j < l; ++j) {
			int v = rand(1,150);
			if(3%3==0) cout<<(char)rand('a','z');
			else if(v%3==1) cout<<(char)rand('A','Z');
			else cout<<rand(0,9);
		}
		cout<<" ";
	}
} 

void tree(int n) {
	int exc = rand(1,n);
	for (int i = 1; i <= n; ++i)
	{
		if(i==exc) continue;
		int first = rand(1,n);
		while(first==i) first = rand(1,n);
		cout<<first<<" "<<i<<endl;
	}
}


signed main()
{
	//freopen("input.txt","w",stdout);
	IOS;
	
	str(1,1);
	int len = rand(1,50),cc=1,rc;
	len=10;
	int cnt = 0, r;
	h:;
	if(cc>=len) goto final;
	r= rand(1,2);
	if(r==1) {
		rc = rand(1,2);
		if(rc==1) {
		hhh:;
		int rr = rand(1,5);
		switch(rr) {
			case 1: cout << "+"; break;
			case 2: cout << "*"; break;
			case 3: cout << "/"; break;
			case 4: cout << "%"; break;
			case 5: cout << "^"; break;
		}
		cc++;
		int rrr=rand(1,2);
		if(rrr==1) {cout << "("; cnt++; cc++;}
		str(1,1);
		goto h;
		}
		else {str(1,1); goto h;}
	}
	else {
		hh:;
		int rr = rand(1,2);
		if(rr==1 && cnt>=1) {cout << ")"; cnt--; goto hh; cc++;}
		else goto hhh;
	}
	final:;
	while (cnt!=0) {
		cnt--;
		cout << ")";
	}
	
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>myexpressiongen</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
