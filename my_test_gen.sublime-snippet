<snippet>
	<content><![CDATA[
#include<bits/stdc++.h>
using namespace std;
 
#define ld long double
#define int long long int
#define pii pair<int,int>
#define pb push_back
#define fi first
#define se second
#define rep(i,a,b) for (int i=a; i<b; ++i)
#define IOS ios::sync_with_stdio(0), cin.tie(0), cout.tie(0)
#define endl '\n'

mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
int rand(int l, int r){
	uniform_int_distribution<int> uid(l, r);
	return uid(rng);
}

// Random n numbers between l and r
void num(int l, int r, int n) {
	for (int i = 0; i < n; ++i)
	{
		cout << rand(l,r) << " ";
	}
}
 
//Random n real numbers between l and r with dig decimal places
void real(int l, int r, int dig, int n) {

	for (int i = 0; i < n; ++i)
	{
		cout << rand(l,r) <<"."<<rand(0,pow(10,dig)-1)<< " ";
	}
}

// Random n strings of length l
void str(int l, int n) {
	for (int i = 0; i < n; ++i)
	{
		for(int j = 0; j < l; ++j) {
			int v = rand(1,150);
			if(3%3==0) cout<<(char)rand('a','z');
			else if(v%3==1) cout<<(char)rand('A','Z');
			else cout<<rand(0,9);
		}
		cout<<" ";
	}
}

// Random n strings of max length l
void strmx(int mxlen, int n) {
	for (int i = 0; i < n; ++i)
	{
		int l = rand(1,mxlen);
		for(int j = 0; j < l; ++j) {
			int v = rand(1,150);
			if(3%3==0) cout<<(char)rand('a','z');
			else if(v%3==1) cout<<(char)rand('A','Z');
			else cout<<rand(0,9);
		}
		cout<<" ";
	}
} 

void tree(int n) {
	int prufer[n-2];
    rep(i,0,n-2){
        prufer[i] = rand(1,n);
    }
    int m = n-2;
    int vertices = m + 2; 
    int vertex_set[vertices]; 
    for (int i = 0; i < vertices; i++) 
        vertex_set[i] = 0; 
    for (int i = 0; i < vertices - 2; i++) 
        vertex_set[prufer[i] - 1] += 1; 
    int j = 0; 
    for (int i = 0; i < vertices - 2; i++) { 
        for (j = 0; j < vertices; j++) { 
            if (vertex_set[j] == 0) { 
                vertex_set[j] = -1; 
                cout << (j + 1) << " "
                     << prufer[i] << '\n'; 
                vertex_set[prufer[i] - 1]--; 
                break; 
            } 
        } 
    } 
    j = 0; 
    for (int i = 0; i < vertices; i++) { 
        if (vertex_set[i] == 0 && j == 0) { 
            cout << (i + 1) << " "; 
            j++; 
        } 
        else if (vertex_set[i] == 0 && j == 1) 
            cout << (i + 1) << "\n"; 
    }
}


signed main()
{
	freopen("input.txt","w",stdout);
	IOS;
	
	
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>mytestgen</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
